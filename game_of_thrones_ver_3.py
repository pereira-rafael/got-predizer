# -*- coding: utf-8 -*-
# """Game of Thrones + Google Sheet

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1bsV6QKBzG__usEDGobsujGS3-aqIMy5w
# """

import numpy as np
import pandas as pd
import streamlit as st
from imblearn.over_sampling import SVMSMOTE
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report

# """#Carregar os dados"""

battle = pd.read_csv('battles.csv')

# """Re-ordenando as colunas apenas para facilitar o tratamento do dados"""

battle = battle[['name',
 'year',
 'battle_number',
 'attacker_king',
 'defender_king',
 'attacker_1',
 'attacker_2',
 'attacker_3',
 'attacker_4',
 'defender_1',
 'defender_2',
 'defender_3',
 'defender_4',
 'battle_type',
 'major_death',
 'major_capture',
 'attacker_size',
 'defender_size',
 'attacker_commander',
 'defender_commander',
 'summer',
 'location',
 'region',
 'note','attacker_outcome',]]

# """Irei retirar as colunas que acredito que não tenham impacto no resultado da batalha"""

battle = battle[['attacker_king',
 'defender_king',
 'battle_type',
 'attacker_commander',
 'defender_commander',
 'summer',
 'location',
 'region',
 'major_death',
 'major_capture',
 'attacker_size',
 'defender_size',
 'attacker_outcome']]

# """Retirando as batalhas sem reis"""

battle = battle.dropna(axis=0, how='any')


sc = StandardScaler()
enc = OneHotEncoder(sparse=False)

bt_enc = battle[['attacker_king',
 'defender_king',
 'battle_type',
 'attacker_commander',
 'defender_commander',
 'summer',
 'location',
 'region',
 'major_death',
 'major_capture']]

bt_sc = battle[['attacker_size',
 'defender_size',
 ]]


bt_enc =  enc.fit_transform(bt_enc)



imputer = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value=0)
imputer.fit(bt_sc)
bt_sc = imputer.transform(bt_sc)

bt_sc = sc.fit_transform(bt_sc)

bt_enc_sc = np.concatenate([bt_enc, bt_sc], axis = 1)

# """#Separação das variaveis"""

X = bt_enc_sc
y = battle.iloc[:, -1].values

# """Tratando os dados faltantes"""

le = LabelEncoder()
y = le.fit_transform(y)

# """Como há poucos dados é possivel aplicar a técnica de dados sintéticos, aumentando o volume de dados"""

sm = SVMSMOTE(random_state=42, k_neighbors = 3, out_step=0.4)
X, y = sm.fit_resample(X,y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# """Treinamento do modelo"""

classifier = SVC()
classifier.fit(X_train, y_train)

param_grid = { 'C': [0.01, 0.1, 1, 10, 100, 1000],
              'gamma': [10 ,1 , 0.1, 0.01, 0.001, 0.0001],
              'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
              'random_state': [0]}

grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)

grid.fit(X_train,y_train)

print(grid.best_params_)

print(grid.best_estimator_)

classifier.fit(X_train, y_train)

# """#Verificando o desempenho"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

cm = confusion_matrix(y_test, y_pred)

print(cm)
accuracy_score(y_test, y_pred)

# """#Prevendo novos resultados"""

predict = [['attacker_king',
 'defender_king',
 'battle_type',
 'attacker_commander',
 'defender_commander',
 'summer',
 'location',
 'region',
 'attacker_size',
 'defender_size']]

# """#Webapp Streamlit"""


st.header('Prevendo vencedores de Batalhas')
st.subheader('Aplicação super simples para predição de resultado de batalhas do universo de Game of Thrones')

st.header('Configurando a batalha')

att_comander = battle.attacker_commander.unique()
def_comander = battle.defender_commander.unique()
local = battle.location.unique()
regions = battle.region.unique()

attacker_king = st.selectbox('Rei Atacante',('Joffrey/Tommen Baratheon', 'Robb Stark', 'Stannis Baratheon'))
defender_king = st.selectbox('Rei Defensor',('Joffrey/Tommen Baratheon', 'Robb Stark', 'Stannis Baratheon', 'Balon/Euron Greyjoy',
                                                     'Renly Baratheon', 'Mance Rayder'))
battle_type = st.selectbox('Tipo de Batalha',('Batalha Campal', 'Emboscada', 'Cerco'))

attacker_commander = st.selectbox('Comandante Atacante',(att_comander))
defender_commander = st.selectbox('Comandante Defensor',(def_comander))
summer = st.selectbox('Verão?',('Sim', 'Não'))

major_death = st.selectbox('Algum nobre morto?',('Sim', 'Não'))
major_capture = st.selectbox('Algum nobre capturado?',('Sim', 'Não'))

location = st.selectbox('Local',(local))
region = st.selectbox('Região',(regions))
attacker_size = st.slider('Número de soldados atacantes', 0 , 50000, 0)    
defender_size = st.slider('Número de soldados defensores', 0 , 50000, 0)    

if battle_type == 'Batalha Campal':
  battle_type = 'pitched battle'
elif battle_type == 'Emboscada':
  battle_type = 'ambush' 
elif battle_type == 'Cerco':
  battle_type = 'siege'

if summer== 'Sim':
  summer = 1
else:
  summer = 0

if summer== 'Sim':
  summer = 1
else:
  summer = 0
  
if major_death == 'Sim':
    major_death = 1
else:
    major_death = 0

if major_capture == 'Sim':
    major_capture = 1
else:
    major_capture = 0    

pred = {'attacker_king': attacker_king,
            'defender_king': defender_king,
            'battle_type' : battle_type,
            'attacker_commander' : attacker_commander,
            'defender_commander': defender_commander,
            'summer': summer,
            'location': location,
            'region': region,
            'major_death': major_death,
            'major_capture':major_capture,
            'attacker_size' : attacker_size,
            'defender_size' :defender_size}

pred_df = pd.Series(pred, name = 'Dados')
pred_df = np.transpose(pred_df)
pred_df = pd.DataFrame(pred_df)
pred_df = pred_df.T

pred_df_enc = pred_df[['attacker_king',
 'defender_king',
 'battle_type',
 'attacker_commander',
 'defender_commander',
 'summer',
 'location',
 'region',
 'major_death',
 'major_capture']]

pred_df_sc = pred_df[['attacker_size',
 'defender_size',
 ]]

pred_df_enc =  enc.transform(pred_df_enc)

pred_df_sc = sc.transform(pred_df_sc)

pred_df_sc_enc = np.concatenate([pred_df_enc, pred_df_sc], axis = 1)

st.subheader('Resultado da Simulação:')

result = classifier.predict(pred_df_sc_enc)

print(classification_report(y_test,y_pred))

if st.button("Simular agora"):
	if result == 1:
	  st.write('Vitória')
	else:
	  st.write('Derrota')
